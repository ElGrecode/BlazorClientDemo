@page "/timezone"
@inject HttpClient Http

<h1>Timezones</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (timezone == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="clock-wrapper">
            <span class="second-wrapper" style='--deg:@(timezone.ClockSecondsDegree)deg'></span>
            <span class="minute-wrapper" style='--deg:@(timezone.ClockMinutesDegree)deg'></span>
            <span class="hour-wrapper" style='--deg:@(timezone.ClockHoursDegree)deg'></span>
        </div>
        <div>@timezone.UnixtimeReadable</div>
        <table class="table">
            <thead>
                <tr>
                    <th>Unixtime</th>
                    <th>Timezone</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@timezone.ClockSeconds + @timezone.Unixtime</td>
                    <td>@timezone.Unixtime</td>
                </tr>
            </tbody>
        </table>
    </div>
    
}

@code {
WeatherForecast[] forecasts;
static TimeZone timezone;
HttpResponseMessage timezonesResponse;
System.Timers.Timer timer;

protected override async Task OnInitAsync()
{
    // Set up timer
    timer = new System.Timers.Timer();
    timer.Interval = 1000;
    timer.Enabled = true;
    timer.Elapsed += OnTick;

    timezone = await Http.GetJsonAsync<TimeZone>("http://worldtimeapi.org/api/timezone/Asia/Manila.json");
}

public void OnTick(Object source, System.Timers.ElapsedEventArgs e)
{
    Console.WriteLine();
    Console.WriteLine("The Elapsed event was raised at {0}", e.SignalTime.TimeOfDay);
    timezone.ClockSeconds += 1;
    timezone.Unixtime += 1;
    timezone.UnixtimeReadable = DateTimeOffset.FromUnixTimeSeconds(timezone.Unixtime).UtcDateTime.ToString();
    timezone.ClockSecondsDegree = timezone.Unixtime % 3600 * 6;
    timezone.ClockMinutesDegree = timezone.Unixtime % 3600 / 6;
    timezone.ClockHoursDegree = timezone.Unixtime % 86400 / 12;
    StateHasChanged();
}

class TimeZone
{
    public string UnixtimeReadable { get; set; }
    public int Unixtime { get; set; }
    public int ClockSeconds { get; set; }
    public int ClockMinutesDegree { get; set; }
    public int ClockSecondsDegree { get; set; }
    public int ClockHoursDegree { get; set; }
}

class WeatherForecast
{
    public DateTime Date { get; set; }

    public int TemperatureC { get; set; }

    public int TemperatureF { get; set; }
}
}
